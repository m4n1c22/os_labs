1.1) Yes, the output was always same regarding 'my_value' variable.
    for Parent: my_value is 42
    for Child: my_value is 18951

2.1) After running many times we observed the following.
    Newly created thread sometimes run before the main thread or sometimes late. Even though thread run concurrent,
    they wont get executed at the same time. Here memory is shared between Parent and Child, so execution order matters.
    In task 1, Parent and Child process won't share the memory.

3.1) After running 100 times, we noticed that the parent block executes first, until the wait() call. 
     Regarding my_value, the output is always the same.
     for Parent: my_value is 42
     for Child: my_value is 18951, because the child manipulated its own copy of my_value
	
3.2) Pros: 
     Pipes offer point to point communication between related processes. 
     IPC using pipes is synchronized, ie. read() sleeps until there is data available in the pipe.
     Pipe is also removed from memory when the process maintaining its descriptor completes execution. Hence, maintenance is easier.(process persistent)

     Cons: 
     This also means that there is less control while using pipes because they do not facilitate asynchronous communication. 
     If two-way communication is needed between processes, two pipes are needed.
	

4.1)	After executing several times, its observed that sometimes child executes once parent sends the message to 	queue and in some cases, child process starts executing before parent sends the message to the queue.  But in all cases even if parent or child executes, parent waits for child to finish execution, then unlinks the message queue. A pipe allows the flow of data in one direction. When data needs to be communicated bidirectional, two pipes are to be created. Only related processes (those in the same branch of the process tree) can communicate through a pipe. Pipes, once closed, require some amount of cooperation on both sides to reestablish them. A message queue is used to transfer "messages", which have a type and size. Several processes may send to and receive from the same queue.  Message queues can be closed and reopened on either side without the cooperation of the other side. Message queues has fixed number of entries, each with maximum size. Message queues allow prioritizing of messages.


4.2)  One use case of Message queues within multithreading (internally in a program) is that message queues can be used as a facility to exchange or queue data from a producer thread to a consumer thread to do asynchronous processing. When need to utilise more parallelism also involving multiple communicating processes for common set of messages, this can be applied.


5.1) We have implemented, two scenarios: scenario_before_wait and scenario_after_wait. In scenario before wait, Parent process try to read the 'buffer' before child process has written the message. So Parent process reads nothing at the beginning. In Scenario_after_wait, Parent process will wait for Child process to complete writing its message, and then Parent process reads it successfully. To implement very big pipes whose status and content may be viewed by other processes, we can use Shared Memory Objects. Message Queues will be best suited for short message passing between the processes.

5.2) In most of the MPI implementations, SMO's are used within a multhi-threaded software. The most common is to use a single thread (the main thread) for all MPI communication and to use other threads for computational tasks;.
